from pyrogram import Client, filters
from pyrogram.types import *
from pymongo import MongoClient
from pyrogram.enums import ChatAction
import requests
import random
from random import choice
import os
import re
import asyncio
import time
from datetime import datetime
from pyrogram import enums
API_ID = os.environ.get("API_ID", None) 
API_HASH = os.environ.get("API_HASH", None) 
BOT_TOKEN = os.environ.get("BOT_TOKEN", None) 
MONGO_URL = os.environ.get("MONGO_URL", None)
BOT_USERNAME = os.environ.get("BOT_USERNAME","") 
UPDATE_CHNL = os.environ.get("UPDATE_CHNL","BROKENSHAYRI1")
OWNER_USERNAME = os.environ.get("OWNER_USERNAME","MR_NARU")
SUPPORT_GRP = os.environ.get("SUPPORT_GRP","SHAYRIGALIBKI")
BOT_NAME = os.environ.get("BOT_NAME","CHATBOT")
START_IMG = os.environ.get("START_IMG","")

STKR = os.environ.get("STKR")


StartTime = time.time()
BRANDEDCHAT = Client(
    "chat-bot" ,
    api_id = API_ID,
    api_hash = API_HASH ,
    bot_token = BOT_TOKEN
)
START =f"""
**‡πè  ú·¥á è, …™ ·¥Ä·¥ç {BOT_NAME}**
**‚ûª·¥Ä…¥ ·¥Ä…™- ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‚ûª ·¥ús·¥Ä…¢·¥á /chatbot [on/off]**
**‡πè ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò ·¥ús·¥á /help**
"""
SOURCE_TEXT = f"""
**‡πè  ú·¥á è, …™ ·¥Ä·¥ç [{BOT_NAME}]
‚ûª ·¥Ä…¥ ·¥Ä…™- ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á**
"""
SOURCE_BUTTONS = InlineKeyboardMarkup([[InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á', callback_data='hurr')], [InlineKeyboardButton(" Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ", url=f"https://t.me/SHAYRIGALIBKI{SUPPORT_GRP}"), InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã ", callback_data="HELP_BACK")]])
SOURCE = '@MR_NARU'
x=["‚ù§Ô∏è","üéâ","‚ú®","ü™∏","üéâ","üéà","üéØ"]
g=choice(x)
async def is_admins(chat_id: int):
    return [
        member.user.id
        async for member in BRANDEDCHAT.get_chat_members(
            chat_id, filter=enums.ChatMembersFilter.ADMINISTRATORS
        )
    ]

MAIN = [
    [
        InlineKeyboardButton(text="·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url=f"https://t.me/{OWNER_USERNAME}"),
        InlineKeyboardButton(text=" Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ", url=f"https://t.me/SHAYRIGALIBKI{SUPPORT_GRP}"),
    ],
    [
        InlineKeyboardButton(
            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text=" ú·¥á ü·¥ò & ·¥Ñ·¥ç·¥Ös ", callback_data="HELP"),
    ],
    [
        InlineKeyboardButton(text="s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á", callback_data='source'),
        InlineKeyboardButton(text=" ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ", url=f"https://t.me/{UPDATE_CHNL}"),
    ],
]
PNG_BTN = [
    [
         InlineKeyboardButton(
             text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è",
             url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
         ),
     ],
     [
         InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", 
                              url=f"https://t.me/{SUPPORT_GRP}",
         ),
     ],
]

HELP_READ = "**·¥ús·¥Ä…¢·¥á ‚òüÔ∏éÔ∏éÔ∏é**\n**‚ûª ·¥ús·¥á** `/chatbot on` **·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**\n**‚ûª ·¥ús·¥á** `/chatbot off` **·¥õ·¥è ·¥Ö…™s·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**\n**‡πè …¥·¥è·¥õ·¥á ‚ûª  ô·¥è·¥õ ú ·¥õ ú·¥á ·¥Ä ô·¥è·¥†·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è Ä ·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥è…¥/·¥è“ì“ì ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è!!**\n\n**‚ûª ·¥ús·¥á** `/ping` **·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.**\n||¬©Ô∏è @NARUCHATBOT||"
HELP_BACK = [
     
    [
           InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã ", callback_data="HELP_BACK"),
    ]
]
@BRANDEDCHAT.on_message(filters.incoming & filters.private, group=-1)
async def must_join_channel(bot: Client, msg: Message):
    if not UPDATE_CHNL:
        return
    try:
        try:
            await bot.get_chat_member(UPDATE_CHNL, msg.from_user.id)
        except UserNotParticipant:
            if UPDATE_CHNL.isalpha():
                link = "https://t.me/" + UPDATE_CHNL
            else:
                chat_info = await bot.get_chat(UPDATE_CHNL)
                link = chat_info.invite_link
            try:
                await msg.reply_photo(
                    photo=START_IMG, caption=f"¬ª ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á  è·¥è·¥ú'·¥†·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö [·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü]({link})  è·¥á·¥õ, …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á ·¥õ ú·¥á…¥ ·¥ä·¥è…™…¥ [·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü]({link}) ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ !",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=link),
                            ]
                        ]
                    )
                )
                await msg.stop_propagation()
            except ChatWriteForbidden:
                pass
    except ChatAdminRequired:
        print(f"Promote me as an admin in the UPDATE CHANNEL  : {UPDATE_CHNL} !")
@BRANDEDCHAT.on_message(filters.command(["start",f"start@{BOT_USERNAME}"]))
async def restart(client, m: Message):
        accha = await m.reply_text(
                        text = f"{g}")
        await asyncio.sleep(1)
        await accha.edit("DM ME @MR_NARU ‚ù§Ô∏èJOIN MY CHANNEL @BROKENSHAYRI1 üíñüíù")
        await asyncio.sleep(0.5)
        await accha.edit("DM ME @MR_NARU ‚ù§Ô∏èJOIN MY CHANNEL @BROKENSHAYRI1 üíñüíù")
        await asyncio.sleep(0.5)
        await accha.edit("DM ME @MR_NARU ‚ù§Ô∏èJOIN MY CHANNEL @BROKENSHAYRI1 üíñüíù")
        await asyncio.sleep(0.5)
        await accha.delete()
        umm = await m.reply_sticker(
                  sticker = STKR,
        )
        await asyncio.sleep(1)
        await umm.delete()
        await m.reply_photo(
            photo = START_IMG,
            caption=START,
            reply_markup=InlineKeyboardMarkup(MAIN),
        )
@BRANDEDCHAT.on_callback_query()
async def cb_handler(Client, query: CallbackQuery):
    if query.data == "HELP":
     await query.message.edit_text(
                      text = HELP_READ,
                      reply_markup = InlineKeyboardMarkup(HELP_BACK),
     )
    elif query.data == "HELP_BACK":
            await query.message.edit(
                  text = START,
                  reply_markup=InlineKeyboardMarkup(MAIN),
        )
    elif query.data == 'source':
        await query.message.edit_text(SOURCE_TEXT, reply_markup=SOURCE_BUTTONS)
    elif query.data == 'hurr':
        await query.answer()
        await query.message.edit_text(SOURCE)
@BRANDEDCHAT.on_message(filters.command(["help", f"help@{BOT_USERNAME}"], prefixes=["","+", ".", "/", "-", "?", "$"]))
async def restart(client, message):
    hmm = await message.reply_photo(START_IMG,
                             caption= HELP_READ,
                        reply_markup= InlineKeyboardMarkup(HELP_BACK),
       )
@BRANDEDCHAT.on_message(filters.command(['source', 'repo']))
async def source(bot, m):
    await m.reply_photo(START_IMG, caption=SOURCE_TEXT, reply_markup=SOURCE_BUTTONS, reply_to_message_id=m.id)
#  alive
@BRANDEDCHAT.on_message(filters.command(["ping","alive"], prefixes=["","+", "/", "-", "?", "$", "&","."]))
async def ping(client, message: Message):
        start = datetime.now()
        t = "__œÅŒπ–∏gŒπ–∏g...__"
        txxt = await message.reply(t)
        await asyncio.sleep(0.25)
        await txxt.edit_text("__œÅŒπ–∏gŒπ–∏g.....__")
        await asyncio.sleep(0.35)
        await txxt.delete()
        end = datetime.now()
        ms = (end-start).microseconds / 1000
        await message.reply_photo(
                             photo=START_IMG,
                             caption=f" ú·¥á è  ô·¥Ä ô è!!\n**[{BOT_NAME}](t.me/{BOT_USERNAME})** …™Íú± ·¥Ä ü…™·¥†·¥á ü•Ä ·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã…™…¥…¢ Íú∞…™…¥·¥á ·¥°…™·¥õ ú ·¥ò·¥è…¥…¢ ·¥èÍú∞ \n‚û• `{ms}` ms\n\n**·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù£Ô∏è  ô è || [NARU JAAT](https://t.me/SHAYRIGALIBKI)||**",
                             reply_markup=InlineKeyboardMarkup(PNG_BTN),
       )

@BRANDEDCHAT.on_message(
    filters.command(["chatbot off", f"chatbot@{BOT_USERNAME} off"], prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatbotofd(client, message):
    vickdb = MongoClient(MONGO_URL)    
    vick = vickdb["VickDb"]["Vick"]     
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
           await is_admins(chat_id)
        ):
           return await message.reply_text(
                "You are not admin"
            )
    is_vick = vick.find_one({"chat_id": message.chat.id})
    if not is_vick:
        vick.insert_one({"chat_id": message.chat.id})
        await message.reply_text(f"Chatbot Disabled!")
    if is_vick:
        await message.reply_text(f"ChatBot Already Disabled")
    

@BRANDEDCHAT.on_message(
    filters.command(["chatbot on", f"chatbot@{BOT_USERNAME} on"] ,prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatboton(client, message):
    vickdb = MongoClient(MONGO_URL)    
    vick = vickdb["VickDb"]["Vick"]     
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
            await is_admins(chat_id)
        ):
            return await message.reply_text(
                "You are not admin"
            )
    is_vick = vick.find_one({"chat_id": message.chat.id})
    if not is_vick:           
        await message.reply_text(f"Chatbot Already Enabled")
    if is_vick:
        vick.delete_one({"chat_id": message.chat.id})
        await message.reply_text(f"ChatBot Enabled!")
    

@BRANDEDCHAT.on_message(
    filters.command(["chatbot", f"chatbot@{BOT_USERNAME}"], prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatbot(client, message):
    await message.reply_text(f"**·¥ús·¥Ä…¢·¥á:**\n/**chatbot [on/off]**\n**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö(s) ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è!**")


@BRANDEDCHAT.on_message(
 (
        filters.text
        | filters.sticker
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
           K = []  
           is_chat = chatai.find({"word": message.text})  
           k = chatai.find_one({"word": message.text})      
           if k:               
               for x in is_chat:
                   K.append(x['text'])          
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "sticker":
                   await message.reply_sticker(f"{hey}")
               if not Yo == "sticker":
                   await message.reply_text(f"{hey}")
   
   if message.reply_to_message:  
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})    
       getme = await BRANDEDCHAT.get_me()
       bot_id = getme.id                             
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                   
               await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:       
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "sticker":
                       await message.reply_sticker(f"{hey}")
                   if not Yo == "sticker":
                       await message.reply_text(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.sticker:
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "id": message.sticker.file_unique_id})
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.sticker.file_id, "check": "sticker", "id": message.sticker.file_unique_id})
           if message.text:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "text": message.text})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.text, "check": "none"})    
               

@BRANDEDCHAT.on_message(
 (
        filters.sticker
        | filters.text
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickstickerai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})      
           k = chatai.find_one({"word": message.text})      
           if k:           
               for x in is_chat:
                   K.append(x['text'])
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "text":
                   await message.reply_text(f"{hey}")
               if not Yo == "text":
                   await message.reply_sticker(f"{hey}")
   
   if message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       getme = await BRANDEDCHAT.get_me()
       bot_id = getme.id
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                    
               await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:           
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "text":
                       await message.reply_text(f"{hey}")
                   if not Yo == "text":
                       await message.reply_sticker(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.text:
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text})
               if not is_chat:
                   toggle.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text, "check": "text"})
           if message.sticker:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id, "check": "none"})    
               


@BRANDEDCHAT.on_message(
    (
        filters.text
        | filters.sticker
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivate(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]
   if not message.reply_to_message: 
       await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
       K = []  
       is_chat = chatai.find({"word": message.text})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "sticker":
           await message.reply_sticker(f"{hey}")
       if not Yo == "sticker":
           await message.reply_text(f"{hey}")
   if message.reply_to_message:            
       getme = await BRANDEDCHAT.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
           K = []  
           is_chat = chatai.find({"word": message.text})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "sticker":
               await message.reply_sticker(f"{hey}")
           if not Yo == "sticker":
               await message.reply_text(f"{hey}")
       

@BRANDEDCHAT.on_message(
 (
        filters.sticker
        | filters.text
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivatesticker(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"] 
   if not message.reply_to_message:
       await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
       K = []  
       is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "text":
           await message.reply_text(f"{hey}")
       if not Yo == "text":
           await message.reply_sticker(f"{hey}")
   if message.reply_to_message:            
       getme = await BRANDEDCHAT.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await BRANDEDCHAT.send_chat_action(message.chat.id, ChatAction.TYPING)
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "text":
               await message.reply_text(f"{hey}")
           if not Yo == "text":
               await message.reply_sticker(f"{hey}")

print(f"{BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á!")      
BRANDEDCHAT.run()
